local function Notify(message, duration)
    spawn(function()
        local existingNotification = game.CoreGui:FindFirstChild("Notification")
        if existingNotification then
            existingNotification:Destroy()
        end

        local notificationGui = Instance.new("ScreenGui")
        notificationGui.Name = "Notification"
        notificationGui.Parent = game.CoreGui

        local notificationLabel = Instance.new("TextLabel")
        notificationLabel.Text = message
        notificationLabel.Size = UDim2.new(0, 200, 0, 50)
        notificationLabel.Position = UDim2.new(0.5, -100, 1, -50)
        notificationLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        notificationLabel.TextColor3 = Color3.new(1, 1, 1)
        notificationLabel.BackgroundTransparency = 0.5
        notificationLabel.Parent = notificationGui

        Instance.new("UICorner", notificationLabel).CornerRadius = UDim.new(0, 6)

        game:GetService("TweenService"):Create(
            notificationLabel,
            TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Position = UDim2.new(0.5, -100, 0.9, -25)}
        ):Play()

        wait(duration)
        notificationGui:Destroy()
    end)
end

local function Sound(soundId, volume)
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://" .. soundId
    sound.Parent = game.CoreGui
    sound.Volume = volume
    sound:Play()
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local Window = Library:NewWindow("Just A Mand ðŸŒ™")
local ScriptTab = Window:NewSection("Script")

local isPromptClosed = false
local hidePlayersEnabled = false
local autoProximityEnabled = false
local isProcessingPrompt = false
local loopActive = false
local playerVisibility = {}

local MarketplaceService = game:GetService("MarketplaceService")
local HttpService = game:GetService("HttpService")

local function fastBuy()
    getrenv()._set = clonefunction(setthreadidentity)
    local old
    old = hookmetamethod(game, "__index", function(a, b)
        task.spawn(function()
            _set(7)
            if isProcessingPrompt then return end
            isProcessingPrompt = true

            local connection
            connection = MarketplaceService.PromptPurchaseRequestedV2:Connect(function(...)
                local startTime = tick()
                local t = {...}
                local assetId = t[2]
                local idempotencyKey = t[5]
                local purchaseAuthToken = t[6]

                local success, result = pcall(function()
                    return MarketplaceService:PerformPurchase(Enum.InfoType.Asset, 0, 0,
                        tostring(HttpService:GenerateGUID(false)), true, nil,
                        nil, idempotencyKey, tostring(purchaseAuthToken))
                end)

                if success then
                    local endTime = tick()
                    local duration = endTime - startTime
                    print("[Fast Buy] Item comprado com sucesso! Tempo: " .. tostring(duration) .. " segundos")
                    Notify("Item comprado com sucesso!", 3)
                else
                    print("[Fast Buy] Falha ao comprar item: " .. result)
                    Notify("Falha ao comprar item!", 3)
                end

                isProcessingPrompt = false
                connection:Disconnect()
            end)
        end)
        hookmetamethod(game, "__index", old)
        return old(a, b)
    end)
end

local function monitorGui()
    while loopActive do
        task.wait(1)

        if isPromptClosed then
            for _, gui in pairs(game.CoreGui:GetChildren()) do
                if gui:IsA("ScreenGui") and gui.Name:lower():find("purchase") then
                    gui.Enabled = false
                    gui:Destroy()
                    print("[Auto Buy] Prompt fechado automaticamente!")
                    Notify("Prompt fechado automaticamente!", 3)
                end
            end
        end
    end
end

local function togglePlayerVisibility(state)
    hidePlayersEnabled = state
    if state then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        playerVisibility[part] = part.Transparency
                        part.Transparency = 1
                    end
                end
            end
        end
        print("[Auto Buy] Hider Players: ON")
        Notify("Hider Players: ON", 3)
    else
        for part, transparency in pairs(playerVisibility) do
            if part and part.Parent then
                part.Transparency = transparency
            end
        end
        playerVisibility = {}
        print("[Auto Buy] Hider Players: OFF")
        Notify("Hider Players: OFF", 3)
    end
end

local function autoCloseError(value)
    loopActive = value
    spawn(function()
        while loopActive do
            local pp = game.CoreGui.PurchasePrompt.ProductPurchaseContainer.Animator:FindFirstChild("Prompt")
            if pp and pp.AlertContents and pp.AlertContents.Footer and pp.AlertContents.Footer.Buttons and not pp.AlertContents.Footer.Buttons:FindFirstChild("2") then
                if pp.AlertContents.Footer.Buttons:FindFirstChild("1") then
                    local b1 = pp.AlertContents.Footer.Buttons[1].AbsolutePosition
                    game:GetService("VirtualInputManager"):SendMouseButtonEvent(b1.X + 55, b1.Y + 65.5, 0, true, game, 1)
                    wait()
                    game:GetService("VirtualInputManager"):SendMouseButtonEvent(b1.X + 55, b1.Y + 65.5, 0, false, game, 1)
                end
            end
            wait()
        end
    end)
    print("[Auto Close Error] " .. (loopActive and "ON" or "OFF"))
    Notify("Auto Close Error: " .. (loopActive and "ON" or "OFF"), 3)
end

local function proxi()
    autoProximityEnabled = not autoProximityEnabled
    if autoProximityEnabled then
        print("[Auto Buy] firepp: ON")
        Notify("firepp: ON", 3)
        spawn(function()
            while autoProximityEnabled do
                for _, pro in ipairs(workspace:GetDescendants()) do
                    if pro:IsA("ProximityPrompt") then
                        fireproximityprompt(pro)
                    end
                end
                task.wait(0.1)
            end
        end)
    else
        print("[Auto Buy] firepp: OFF")
        Notify("firepp: OFF", 3)
    end
end

local function antiAFK()
    local iku = coroutine.create(function()
        local VirtualUser = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end)
    coroutine.resume(iku)
    print("[Anti AFK] Ativado!")
    Notify("Anti AFK Ativado!", 3)
end

ScriptTab:CreateToggle("Auto Buy", function(state)
    isPromptClosed = state
    print("[Auto Buy] Cancel Prompt: " .. (state and "ON" or "OFF"))
    Notify("Auto Buy: " .. (state and "ON" or "OFF"), 3)
end)

ScriptTab:CreateToggle("Auto Close Error", function(state)
    autoCloseError(state)
end)

ScriptTab:CreateButton("Auto Cancel Prompt", function()
    loopActive = not loopActive
    if loopActive then
        print("[Auto Close Prompt] Loop Ativado!")
        Notify("Auto Close Prompt: ON", 3)
        spawn(monitorGui)
    else
        print("[Auto Close Prompt] Loop Desativado!")
        Notify("Auto Close Prompt: OFF", 3)
    end
end)

ScriptTab:CreateButton("firepp", function()
    proxi()
end)

ScriptTab:CreateButton("Hide Players", function()
    hidePlayersEnabled = not hidePlayersEnabled
    togglePlayerVisibility(hidePlayersEnabled)
end)

antiAFK()

while true do
    fastBuy()
    task.wait(0.001)
end
